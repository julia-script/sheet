;; Sema
;; 10 declarations
;; 23 entities
;; 10 symbols
;; 152 instructions
;; 47 values
;; 18 types
;; 3 lists
;; 37 strings
;; 56/65 comptime memory used/allocated bytes

%0 = type @"alloc/allocations-and-loads.sk::T" = struct:
 ├ type: struct{i32}
 ├ alignment: 4
 ├ size: 4
 └ fields: 1
    └ [0]
       ├ alignment: 4
       ├ size: 4
       ├ offset: 0
       └ type: i32


%1 = fn @"alloc/allocations-and-loads.sk::struct_alloc"() -> void
 └ %0: void = .block: [%1-%9]                                         ; void
    ├ !%1: typeof(struct{i32}) = .global_get declaration=(%0)         ; typeof(struct{i32})
    ├ !%2: number = .constant                                         ; number{ 123 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: struct{i32} = .type_init                                   ; todo_complex(struct)
    ├ !%5: type = .typeof operand=(%4)                                ; type(struct{i32})
    ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)    ; *struct{i32}@0
    ├ %7: i32 = .constant                                             ; i32{ 123 }
    ├ %8: *i32 = .get_element_pointer base=(%6) index=(%0)            ; *i32@0
    └ %9: void = .store operand=(%8) payload=(%7)                     ; void

%2 = fn @"alloc/allocations-and-loads.sk::struct_alloc_2"() -> void
 └ %0: void = .block: [%1-%13]                                        ; void
    ├ !%1: typeof(struct{i32}) = .global_get declaration=(%0)         ; typeof(struct{i32})
    ├ !%2: number = .constant                                         ; number{ 123 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: struct{i32} = .type_init                                   ; todo_complex(struct)
    ├ !%5: type = .typeof operand=(%4)                                ; type(struct{i32})
    ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(true)     ; *struct{i32}[runtime]
    ├ %7: i32 = .constant                                             ; i32{ 123 }
    ├ %8: *i32 = .get_element_pointer base=(%6) index=(%0)            ; *i32[runtime]
    ├ %9: void = .store operand=(%8) payload=(%7)                     ; void
    ├ %10: *i32 = .get_element_pointer base=(%6) index=(%0)           ; *i32[runtime]
    ├ !%11: number = .constant                                        ; number{ 3 }
    ├ %12: i32 = .constant                                            ; i32{ 3 }
    └ %13: void = .store operand=(%10) payload=(%12)                  ; void

%3 = fn @"alloc/allocations-and-loads.sk::struct_alloc_3"() -> void
 └ %0: void = .block: [%1-%13]                                        ; void
    ├ !%1: typeof(struct{i32}) = .global_get declaration=(%0)         ; typeof(struct{i32})
    ├ !%2: number = .constant                                         ; number{ 123 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: struct{i32} = .type_init                                   ; todo_complex(struct)
    ├ !%5: type = .typeof operand=(%4)                                ; type(struct{i32})
    ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(true)     ; *struct{i32}[runtime]
    ├ %7: i32 = .constant                                             ; i32{ 123 }
    ├ %8: *i32 = .get_element_pointer base=(%6) index=(%0)            ; *i32[runtime]
    ├ %9: void = .store operand=(%8) payload=(%7)                     ; void
    ├ %10: struct{i32} = .load operand=(%6)                           ; todo_complex(struct)
    ├ !%11: type = .typeof operand=(%10)                              ; type(struct{i32})
    ├ %12: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)   ; *struct{i32}@4
    └ %13: void = .store operand=(%12) payload=(%10)                  ; void

%4 = fn @"alloc/allocations-and-loads.sk::struct_load"() -> void
 └ %0: void = .block: [%1-%14]                                        ; void
    ├ !%1: typeof(struct{i32}) = .global_get declaration=(%0)         ; typeof(struct{i32})
    ├ !%2: number = .constant                                         ; number{ 123 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: struct{i32} = .type_init                                   ; todo_complex(struct)
    ├ !%5: type = .typeof operand=(%4)                                ; type(struct{i32})
    ├ %6: *struct{i32} = .alloc type=(struct{i32}) mutable=(false)    ; *struct{i32}@8
    ├ %7: i32 = .constant                                             ; i32{ 123 }
    ├ %8: *i32 = .get_element_pointer base=(%6) index=(%0)            ; *i32@8
    ├ %9: void = .store operand=(%8) payload=(%7)                     ; void
    ├ %10: *i32 = .get_element_pointer base=(%6) index=(%0)           ; *i32@8
    ├ %11: i32 = .load operand=(%10)                                  ; i32{ 123 }
    ├ !%12: type = .typeof operand=(%11)                              ; type(i32)
    ├ %13: *i32 = .alloc type=(i32) mutable=(false)                   ; *i32@c
    └ %14: void = .store operand=(%13) payload=(%11)                  ; void

%5 = fn @"alloc/allocations-and-loads.sk::int_alloc"() -> void
 └ %0: void = .block: [%1-%5]                                         ; void
    ├ !%1: number = .constant                                         ; number{ 10 }
    ├ !%2: typeof(i32) = .type                                        ; typeof(i32)
    ├ %3: *i32 = .alloc type=(i32) mutable=(false)                    ; *i32@10
    ├ %4: i32 = .constant                                             ; i32{ 10 }
    └ %5: void = .store operand=(%3) payload=(%4)                     ; void

%6 = fn @"alloc/allocations-and-loads.sk::int_alloc_2"() -> void
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ !%1: number = .constant                                         ; number{ 10 }
    ├ !%2: typeof(i32) = .type                                        ; typeof(i32)
    ├ %3: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %4: i32 = .constant                                             ; i32{ 10 }
    ├ %5: void = .store operand=(%3) payload=(%4)                     ; void
    ├ !%6: number = .constant                                         ; number{ 123 }
    ├ %7: i32 = .constant                                             ; i32{ 123 }
    └ %8: void = .store operand=(%3) payload=(%7)                     ; void

%7 = fn @"alloc/allocations-and-loads.sk::array_alloc"() -> void
 └ %0: void = .block: [%1-%25]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 3 }
    ├ !%3: usize = .constant                                          ; usize{ 3 }
    ├ !%4: typeof([3]i32) = .type                                     ; typeof([3]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: [3]i32 = .array_init                                       ; todo_complex(array)
    ├ !%9: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%10: number = .constant                                        ; number{ 3 }
    ├ !%11: usize = .constant                                         ; usize{ 3 }
    ├ !%12: typeof([3]i32) = .type                                    ; typeof([3]i32)
    ├ %13: *[3]i32 = .alloc type=([3]i32) mutable=(false)             ; *[3]i32@14
    ├ %14: usize = .constant                                          ; usize{ 0 }
    ├ %15: *i32 = .get_element_pointer base=(%13) index=(%14)         ; *i32@14
    ├ %16: i32 = .constant                                            ; i32{ 1 }
    ├ %17: void = .store operand=(%15) payload=(%16)                  ; void
    ├ %18: usize = .constant                                          ; usize{ 4 }
    ├ %19: *i32 = .get_element_pointer base=(%13) index=(%18)         ; *i32@18
    ├ %20: i32 = .constant                                            ; i32{ 2 }
    ├ %21: void = .store operand=(%19) payload=(%20)                  ; void
    ├ %22: usize = .constant                                          ; usize{ 8 }
    ├ %23: *i32 = .get_element_pointer base=(%13) index=(%22)         ; *i32[runtime]
    ├ %24: i32 = .constant                                            ; i32{ 3 }
    └ %25: void = .store operand=(%23) payload=(%24)                  ; void

%8 = fn @"alloc/allocations-and-loads.sk::array_alloc_2"() -> void
 └ %0: void = .block: [%1-%31]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 3 }
    ├ !%3: usize = .constant                                          ; usize{ 3 }
    ├ !%4: typeof([3]i32) = .type                                     ; typeof([3]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: [3]i32 = .array_init                                       ; todo_complex(array)
    ├ !%9: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%10: number = .constant                                        ; number{ 3 }
    ├ !%11: usize = .constant                                         ; usize{ 3 }
    ├ !%12: typeof([3]i32) = .type                                    ; typeof([3]i32)
    ├ %13: *[3]i32 = .alloc type=([3]i32) mutable=(true)              ; *[3]i32@20
    ├ %14: usize = .constant                                          ; usize{ 0 }
    ├ %15: *i32 = .get_element_pointer base=(%13) index=(%14)         ; *i32@20
    ├ %16: i32 = .constant                                            ; i32{ 1 }
    ├ %17: void = .store operand=(%15) payload=(%16)                  ; void
    ├ %18: usize = .constant                                          ; usize{ 4 }
    ├ %19: *i32 = .get_element_pointer base=(%13) index=(%18)         ; *i32@24
    ├ %20: i32 = .constant                                            ; i32{ 2 }
    ├ %21: void = .store operand=(%19) payload=(%20)                  ; void
    ├ %22: usize = .constant                                          ; usize{ 8 }
    ├ %23: *i32 = .get_element_pointer base=(%13) index=(%22)         ; *i32[runtime]
    ├ %24: i32 = .constant                                            ; i32{ 3 }
    ├ %25: void = .store operand=(%23) payload=(%24)                  ; void
    ├ !%26: number = .constant                                        ; number{ 0 }
    ├ %27: usize = .constant                                          ; usize{ 0 }
    ├ %28: *i32 = .get_element_pointer base=(%13) index=(%27)         ; *i32@0
    ├ !%29: number = .constant                                        ; number{ 4 }
    ├ %30: i32 = .constant                                            ; i32{ 4 }
    └ %31: void = .store operand=(%28) payload=(%30)                  ; void

%9 = fn @"alloc/allocations-and-loads.sk::array_alloc_3"() -> void
 └ %0: void = .block: [%1-%22]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 3 }
    ├ !%3: usize = .constant                                          ; usize{ 3 }
    ├ !%4: typeof([3]i32) = .type                                     ; typeof([3]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: [3]i32 = .array_init                                       ; todo_complex(array)
    ├ !%9: type = .typeof operand=(%8)                                ; type([3]i32)
    ├ %10: *[3]i32 = .alloc type=([3]i32) mutable=(false)             ; *[3]i32@2c
    ├ %11: usize = .constant                                          ; usize{ 0 }
    ├ %12: *i32 = .get_element_pointer base=(%10) index=(%11)         ; *i32@2c
    ├ %13: i32 = .constant                                            ; i32{ 1 }
    ├ %14: void = .store operand=(%12) payload=(%13)                  ; void
    ├ %15: usize = .constant                                          ; usize{ 4 }
    ├ %16: *i32 = .get_element_pointer base=(%10) index=(%15)         ; *i32@30
    ├ %17: i32 = .constant                                            ; i32{ 2 }
    ├ %18: void = .store operand=(%16) payload=(%17)                  ; void
    ├ %19: usize = .constant                                          ; usize{ 8 }
    ├ %20: *i32 = .get_element_pointer base=(%10) index=(%19)         ; *i32@34
    ├ %21: i32 = .constant                                            ; i32{ 3 }
    └ %22: void = .store operand=(%20) payload=(%21)                  ; void

