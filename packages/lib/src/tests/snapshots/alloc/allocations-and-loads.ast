;; AST
;; 193 Nodes
;; 205 Tokens
;; 174 Interned Lists

%0 = .struct_decl - tok[0..205]
 └ members_list: 163 items
    ├ %1 = .comment_line - tok[0..1]
    │  └ token: .comment '// type T = struct {'
    ├ %2 = .comment_line - tok[1..2]
    │  └ token: .comment '//   bar: i32,'
    ├ %3 = .comment_line - tok[2..3]
    │  └ token: .comment '// };'
    ├ %4 = .comment_line - tok[3..4]
    │  └ token: .comment '// fn struct_alloc() void {'
    ├ %5 = .comment_line - tok[4..5]
    │  └ token: .comment '//   // %0 = alloc T                          ; *T@ptr:0'
    ├ %6 = .comment_line - tok[5..6]
    │  └ token: .comment '//   // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %7 = .comment_line - tok[6..7]
    │  └ token: .comment '//   // %2 = const 123                        ; 123 int'
    ├ %8 = .comment_line - tok[7..8]
    │  └ token: .comment '//   // %3 = as i32 %2                        ; 123 i32'
    ├ %9 = .comment_line - tok[8..9]
    │  └ token: .comment '//   // %4 = store %1 %3                      ; void'
    ├ %10 = .comment_line - tok[9..10]
    │  └ token: .comment '//   const foo = T { bar = 123 };'
    ├ %11 = .comment_line - tok[10..11]
    │  └ token: .comment '// }'
    ├ %12 = .comment_line - tok[11..12]
    │  └ token: .comment '// fn struct_alloc_2() void {'
    ├ %13 = .comment_line - tok[12..13]
    │  └ token: .comment '//   // %0 = alloc T                          ; *T@ptr:0'
    ├ %14 = .comment_line - tok[13..14]
    │  └ token: .comment '//   // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %15 = .comment_line - tok[14..15]
    │  └ token: .comment '//   // %2 = const 123                        ; 123 int'
    ├ %16 = .comment_line - tok[15..16]
    │  └ token: .comment '//   // %3 = as i32 %2                        ; 123 i32'
    ├ %17 = .comment_line - tok[16..17]
    │  └ token: .comment '//   // %4 = store %1 %3                      ; void'
    ├ %18 = .comment_line - tok[17..18]
    │  └ token: .comment '//   var foo = T { bar = 123 };'
    ├ %19 = .comment_line - tok[18..19]
    │  └ token: .comment '//   // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %20 = .comment_line - tok[19..20]
    │  └ token: .comment '//   // %6 = const 3                          ; 3 int'
    ├ %21 = .comment_line - tok[20..21]
    │  └ token: .comment '//   // %7 = as i32 %6                        ; 3 i32'
    ├ %22 = .comment_line - tok[21..22]
    │  └ token: .comment '//   // %8 = store %5 %7                    ; void'
    ├ %23 = .comment_line - tok[22..23]
    │  └ token: .comment '//   foo.bar = 3;'
    ├ %24 = .comment_line - tok[23..24]
    │  └ token: .comment '// }'
    ├ %25 = .comment_line - tok[24..25]
    │  └ token: .comment '// fn struct_alloc_3() void {'
    ├ %26 = .comment_line - tok[25..26]
    │  └ token: .comment '//   // %0 = alloc T                          ; *T@ptr:0'
    ├ %27 = .comment_line - tok[26..27]
    │  └ token: .comment '//   // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %28 = .comment_line - tok[27..28]
    │  └ token: .comment '//   // %2 = const 123                        ; 123 int'
    ├ %29 = .comment_line - tok[28..29]
    │  └ token: .comment '//   // %3 = as i32 %2                        ; 123 i32'
    ├ %30 = .comment_line - tok[29..30]
    │  └ token: .comment '//   // %4 = store %1 %3                      ; void'
    ├ %31 = .comment_line - tok[30..31]
    │  └ token: .comment '//   var foo = T { bar = 123 };'
    ├ %32 = .comment_line - tok[31..32]
    │  └ token: .comment '//   // %5 = alloc T                          ; *T@ptr:4'
    ├ %33 = .comment_line - tok[32..33]
    │  └ token: .comment '//   // %6 = memcpy %5 %0                     ; void'
    ├ %34 = .comment_line - tok[33..34]
    │  └ token: .comment '//   const foo2 = foo;'
    ├ %35 = .comment_line - tok[34..35]
    │  └ token: .comment '// }'
    ├ %36 = .comment_line - tok[35..36]
    │  └ token: .comment '// fn struct_load() void {'
    ├ %37 = .comment_line - tok[36..37]
    │  └ token: .comment '//   // %0 = alloc T                          ; *T@ptr:0'
    ├ %38 = .comment_line - tok[37..38]
    │  └ token: .comment '//   // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %39 = .comment_line - tok[38..39]
    │  └ token: .comment '//   // %2 = const 123                        ; 123 int'
    ├ %40 = .comment_line - tok[39..40]
    │  └ token: .comment '//   // %3 = as i32 %2                        ; 123 i32'
    ├ %41 = .comment_line - tok[40..41]
    │  └ token: .comment '//   // %4 = store %1 %3                      ; void'
    ├ %42 = .comment_line - tok[41..42]
    │  └ token: .comment '//   const foo = T { bar = 123 };'
    ├ %43 = .comment_line - tok[42..43]
    │  └ token: .comment '//   // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0'
    ├ %44 = .comment_line - tok[43..44]
    │  └ token: .comment '//   // %6 = load %5                          ; 123 i32'
    ├ %45 = .comment_line - tok[44..45]
    │  └ token: .comment '//   // %7 = alloc i32                        ; *i32@ptr:4'
    ├ %46 = .comment_line - tok[45..46]
    │  └ token: .comment '//   // %8 = store %7 %6                      ; void'
    ├ %47 = .comment_line - tok[46..47]
    │  └ token: .comment '//   const bar = foo.bar;'
    ├ %48 = .comment_line - tok[47..48]
    │  └ token: .comment '// }'
    ├ %49 = .comment_line - tok[48..49]
    │  └ token: .comment '// // const global_foo = T { bar = 123 };'
    ├ %50 = .comment_line - tok[49..50]
    │  └ token: .comment '// // fn struct_from_global() void {'
    ├ %51 = .comment_line - tok[50..51]
    │  └ token: .comment '// //   // %0 = alloc T                          ; *T@ptr:0'
    ├ %52 = .comment_line - tok[51..52]
    │  └ token: .comment '// //   // %1 = memcpy %0 %global_foo            ; void'
    ├ %53 = .comment_line - tok[52..53]
    │  └ token: .comment '// //   const bar = global_foo;'
    ├ %54 = .comment_line - tok[53..54]
    │  └ token: .comment '// // }'
    ├ %55 = .comment_line - tok[54..55]
    │  └ token: .comment '// fn int_alloc() void {'
    ├ %56 = .comment_line - tok[55..56]
    │  └ token: .comment '//   // %0 = alloc i32                        ; *i32@ptr:0'
    ├ %57 = .comment_line - tok[56..57]
    │  └ token: .comment '//   // %1 = const 10                         ; 10 int'
    ├ %58 = .comment_line - tok[57..58]
    │  └ token: .comment '//   // %2 = as i32 %1                        ; 10 i32'
    ├ %59 = .comment_line - tok[58..59]
    │  └ token: .comment '//   // %3 = store %0 %2                      ; void'
    ├ %60 = .comment_line - tok[59..60]
    │  └ token: .comment '//   const foo: i32 = 10;'
    ├ %61 = .comment_line - tok[60..61]
    │  └ token: .comment '// }'
    ├ %62 = .comment_line - tok[61..62]
    │  └ token: .comment '// fn int_alloc_2() void {'
    ├ %63 = .comment_line - tok[62..63]
    │  └ token: .comment '//   // %0 = alloc i32                        ; *i32@ptr:0'
    ├ %64 = .comment_line - tok[63..64]
    │  └ token: .comment '//   // %1 = const 10                         ; 10 int'
    ├ %65 = .comment_line - tok[64..65]
    │  └ token: .comment '//   // %2 = as i32 %1                        ; 10 i32'
    ├ %66 = .comment_line - tok[65..66]
    │  └ token: .comment '//   // %3 = store %0 %2                      ; void'
    ├ %67 = .comment_line - tok[66..67]
    │  └ token: .comment '//   var foo: i32 = 10;'
    ├ %68 = .comment_line - tok[67..68]
    │  └ token: .comment '//   // %4 = const 123                        ; 123 int'
    ├ %69 = .comment_line - tok[68..69]
    │  └ token: .comment '//   // %5 = as i32 %4                        ; 123 i32'
    ├ %70 = .comment_line - tok[69..70]
    │  └ token: .comment '//   // %6 = store %0 %5                      ; void'
    ├ %71 = .comment_line - tok[70..71]
    │  └ token: .comment '//   foo = 123;'
    ├ %72 = .comment_line - tok[71..72]
    │  └ token: .comment '// }'
    ├ %73 = .comment_line - tok[72..73]
    │  └ token: .comment '// // fn int_load() void {'
    ├ %74 = .comment_line - tok[73..74]
    │  └ token: .comment '// //   // %0 = alloc i32                        ; *i32@ptr:0'
    ├ %75 = .comment_line - tok[74..75]
    │  └ token: .comment '// //   // %1 = const 10                         ; 10 int'
    ├ %76 = .comment_line - tok[75..76]
    │  └ token: .comment '// //   // %2 = as i32 %1                        ; 10 i32'
    ├ %77 = .comment_line - tok[76..77]
    │  └ token: .comment '// //   // %3 = store %0 %2                      ; void'
    ├ %78 = .comment_line - tok[77..78]
    │  └ token: .comment '// //   const foo: i32 = 10;'
    ├ %79 = .comment_line - tok[78..79]
    │  └ token: .comment '// //   // %4 = load i32 %0                      ; 10 i32'
    ├ %80 = .comment_line - tok[79..80]
    │  └ token: .comment '// //   // %5 = alloc i32                        ; *i32@ptr:4'
    ├ %81 = .comment_line - tok[80..81]
    │  └ token: .comment '// //   // %6 = store i32 %5 %4                  ; void'
    ├ %82 = .comment_line - tok[81..82]
    │  └ token: .comment '// //   const bar = foo;'
    ├ %83 = .comment_line - tok[82..83]
    │  └ token: .comment '// // }'
    ├ %84 = .comment_line - tok[83..84]
    │  └ token: .comment '// fn array_alloc() void {'
    ├ %85 = .comment_line - tok[84..85]
    │  └ token: .comment '//   // %0 = alloc [3]i32                        ; *[3]i32@ptr:0'
    ├ %86 = .comment_line - tok[85..86]
    │  └ token: .comment '//   // %1 = const 0                             ; 0 int'
    ├ %87 = .comment_line - tok[86..87]
    │  └ token: .comment '//   // %2 = as usize %1                         ; 0 usize'
    ├ %88 = .comment_line - tok[87..88]
    │  └ token: .comment '//   // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0'
    ├ %89 = .comment_line - tok[88..89]
    │  └ token: .comment '//   // %4 = const 1                             ; 1 int'
    ├ %90 = .comment_line - tok[89..90]
    │  └ token: .comment '//   // %5 = as i32 %4                           ; 1 i32'
    ├ %91 = .comment_line - tok[90..91]
    │  └ token: .comment '//   // %6 = store %3 %5                         ; void'
    ├ %92 = .comment_line - tok[91..92]
    │  └ token: .comment '//   // %7 = const 1                             ; 1 int'
    ├ %93 = .comment_line - tok[92..93]
    │  └ token: .comment '//   // %8 = as usize %7                         ; 1 usize'
    ├ %94 = .comment_line - tok[93..94]
    │  └ token: .comment '//   // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4'
    ├ %95 = .comment_line - tok[94..95]
    │  └ token: .comment '//   // %10 = const 2                            ; 2 int'
    ├ %96 = .comment_line - tok[95..96]
    │  └ token: .comment '//   // %11 = as i32 %10                         ; 2 i32'
    ├ %97 = .comment_line - tok[96..97]
    │  └ token: .comment '//   // %12 = store %9 %11                       ; void'
    ├ %98 = .comment_line - tok[97..98]
    │  └ token: .comment '//   // %13 = const 2                            ; 2 int'
    ├ %99 = .comment_line - tok[98..99]
    │  └ token: .comment '//   // %14 = as usize %13                       ; 2 usize'
    ├ %100 = .comment_line - tok[99..100]
    │  └ token: .comment '//   // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8'
    ├ %101 = .comment_line - tok[100..101]
    │  └ token: .comment '//   // %16 = const 3                            ; 3 int'
    ├ %102 = .comment_line - tok[101..102]
    │  └ token: .comment '//   // %17 = as i32 %16                         ; 3 i32'
    ├ %103 = .comment_line - tok[102..103]
    │  └ token: .comment '//   // %18 = store %15 %17                      ; void'
    ├ %104 = .comment_line - tok[103..104]
    │  └ token: .comment '//   const foo: [3]i32 = [3]i32{1, 2, 3};'
    ├ %105 = .comment_line - tok[104..105]
    │  └ token: .comment '// }'
    ├ %106 = .comment_line - tok[105..106]
    │  └ token: .comment '// fn array_alloc_2() void {'
    ├ %107 = .comment_line - tok[106..107]
    │  └ token: .comment '//   // %0 = alloc [3]i32                        ; *[3]i32@ptr:0'
    ├ %108 = .comment_line - tok[107..108]
    │  └ token: .comment '//   // %1 = const 0                             ; 0 int'
    ├ %109 = .comment_line - tok[108..109]
    │  └ token: .comment '//   // %2 = as usize %1                         ; 0 usize'
    ├ %110 = .comment_line - tok[109..110]
    │  └ token: .comment '//   // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0'
    ├ %111 = .comment_line - tok[110..111]
    │  └ token: .comment '//   // %4 = const 1                             ; 1 int'
    ├ %112 = .comment_line - tok[111..112]
    │  └ token: .comment '//   // %5 = as i32 %4                           ; 1 i32'
    ├ %113 = .comment_line - tok[112..113]
    │  └ token: .comment '//   // %6 = store %3 %5                         ; void'
    ├ %114 = .comment_line - tok[113..114]
    │  └ token: .comment '//   // %7 = const 1                             ; 1 int'
    ├ %115 = .comment_line - tok[114..115]
    │  └ token: .comment '//   // %8 = as usize %7                         ; 1 usize'
    ├ %116 = .comment_line - tok[115..116]
    │  └ token: .comment '//   // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4'
    ├ %117 = .comment_line - tok[116..117]
    │  └ token: .comment '//   // %10 = const 2                            ; 2 int'
    ├ %118 = .comment_line - tok[117..118]
    │  └ token: .comment '//   // %11 = as i32 %10                         ; 2 i32'
    ├ %119 = .comment_line - tok[118..119]
    │  └ token: .comment '//   // %12 = store %9 %11                       ; void'
    ├ %120 = .comment_line - tok[119..120]
    │  └ token: .comment '//   // %13 = const 2                            ; 2 int'
    ├ %121 = .comment_line - tok[120..121]
    │  └ token: .comment '//   // %14 = as usize %13                       ; 2 usize'
    ├ %122 = .comment_line - tok[121..122]
    │  └ token: .comment '//   // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8'
    ├ %123 = .comment_line - tok[122..123]
    │  └ token: .comment '//   // %16 = const 3                            ; 3 int'
    ├ %124 = .comment_line - tok[123..124]
    │  └ token: .comment '//   // %17 = as i32 %16                         ; 3 i32'
    ├ %125 = .comment_line - tok[124..125]
    │  └ token: .comment '//   // %18 = store %15 %17                      ; void'
    ├ %126 = .comment_line - tok[125..126]
    │  └ token: .comment '//   var foo: [3]i32 = [3]i32{1, 2, 3};'
    ├ %127 = .comment_line - tok[126..127]
    │  └ token: .comment '//   // %19 = const 0                            ; 0 int'
    ├ %128 = .comment_line - tok[127..128]
    │  └ token: .comment '//   // %20 = as usize %19                       ; 0 usize'
    ├ %129 = .comment_line - tok[128..129]
    │  └ token: .comment '//   // %21 = get_el_ptr %0 i=(%20) offset=(0)   ; *i32@ptr:0'
    ├ %130 = .comment_line - tok[129..130]
    │  └ token: .comment '//   // %22 = const 4                            ; 4 int'
    ├ %131 = .comment_line - tok[130..131]
    │  └ token: .comment '//   // %23 = as i32 %22                         ; 4 i32'
    ├ %132 = .comment_line - tok[131..132]
    │  └ token: .comment '//   // %24 = store %21 %23                      ; void'
    ├ %133 = .comment_line - tok[132..133]
    │  └ token: .comment '//   foo[0] = 4;'
    ├ %134 = .comment_line - tok[133..134]
    │  └ token: .comment '// }'
    ├ %135 = .comment_line - tok[134..135]
    │  └ token: .comment '// fn array_alloc_3() void {'
    ├ %136 = .comment_line - tok[135..136]
    │  └ token: .comment '//   // %0 = alloc [3]i32                        ; *[3]i32@ptr:0'
    ├ %137 = .comment_line - tok[136..137]
    │  └ token: .comment '//   // %1 = const 0                             ; 0 int'
    ├ %138 = .comment_line - tok[137..138]
    │  └ token: .comment '//   // %2 = as usize %1                         ; 0 usize'
    ├ %139 = .comment_line - tok[138..139]
    │  └ token: .comment '//   // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0'
    ├ %140 = .comment_line - tok[139..140]
    │  └ token: .comment '//   // %4 = const 1                             ; 1 int'
    ├ %141 = .comment_line - tok[140..141]
    │  └ token: .comment '//   // %5 = as i32 %4                           ; 1 i32'
    ├ %142 = .comment_line - tok[141..142]
    │  └ token: .comment '//   // %6 = store %3 %5                         ; void'
    ├ %143 = .comment_line - tok[142..143]
    │  └ token: .comment '//   // %7 = const 1                             ; 1 int'
    ├ %144 = .comment_line - tok[143..144]
    │  └ token: .comment '//   // %8 = as usize %7                         ; 1 usize'
    ├ %145 = .comment_line - tok[144..145]
    │  └ token: .comment '//   // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4'
    ├ %146 = .comment_line - tok[145..146]
    │  └ token: .comment '//   // %10 = const 2                            ; 2 int'
    ├ %147 = .comment_line - tok[146..147]
    │  └ token: .comment '//   // %11 = as i32 %10                         ; 2 i32'
    ├ %148 = .comment_line - tok[147..148]
    │  └ token: .comment '//   // %12 = store %9 %11                       ; void'
    ├ %149 = .comment_line - tok[148..149]
    │  └ token: .comment '//   // %13 = const 2                            ; 2 int'
    ├ %150 = .comment_line - tok[149..150]
    │  └ token: .comment '//   // %14 = as usize %13                       ; 2 usize'
    ├ %151 = .comment_line - tok[150..151]
    │  └ token: .comment '//   // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8'
    ├ %152 = .comment_line - tok[151..152]
    │  └ token: .comment '//   // %16 = const 3                            ; 3 int'
    ├ %153 = .comment_line - tok[152..153]
    │  └ token: .comment '//   // %17 = as i32 %16                         ; 3 i32'
    ├ %154 = .comment_line - tok[153..154]
    │  └ token: .comment '//   // %18 = store %15 %17                      ; void'
    ├ %155 = .comment_line - tok[154..155]
    │  └ token: .comment '//   const foo = [3]i32{1, 2, 3};'
    ├ %156 = .comment_line - tok[155..156]
    │  └ token: .comment '// }'
    ├ %157 = .comment_line - tok[156..157]
    │  └ token: .comment '// // %mem.data.0: [5]bchar = "Hello"'
    ├ %158 = .comment_line - tok[157..158]
    │  └ token: .comment '// fn str_alloc() void {'
    ├ %159 = .comment_line - tok[158..159]
    │  └ token: .comment '//   // %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0'
    ├ %160 = .comment_line - tok[159..160]
    │  └ token: .comment '//   // %1 = memcpy %0 %mem.data.0             ; void'
    ├ %161 = .comment_line - tok[160..161]
    │  └ token: .comment '//   const foo = "Hello";'
    ├ %162 = .comment_line - tok[161..162]
    │  └ token: .comment '// }'
    └ %192 = .fn_decl - tok[162..204]
       ├ proto: %165 = .fn_proto - tok[163..166]
       │  ├ name: %163 = .identifier - tok[163..163]
       │  │  └ token: .identifier 'str_alloc_2'
       │  ├ params_list: 0 items
       │  ├ ret_type: %164 = .ty_void - tok[166..166]
       │  │  └ token: .keyword_void 'void'
       │  └ is_declaring_builtin: false
       └ body: %191 = .block - tok[167..203]
          └ list: 11 items
             ├ %166 = .comment_line - tok[168..169]
             │  └ token: .comment '// %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0'
             ├ %167 = .comment_line - tok[169..170]
             │  └ token: .comment '// %1 = memcpy %0 %mem.data.0             ; void'
             ├ %170 = .var_decl - tok[170..173]
             │  ├ name: %168 = .identifier - tok[171..171]
             │  │  └ token: .identifier 'foo'
             │  ├ type: NONE
             │  └ value: %169 = .string_literal - tok[173..173]
             │     └ token: .string_literal '"Hello"'
             ├ %171 = .comment_line - tok[175..176]
             │  └ token: .comment '// %2 = usize.const 0                     ; 0 usize'
             ├ %172 = .comment_line - tok[176..177]
             │  └ token: .comment '// %3 = get_el_ptr %0 i=(%2) offset=(0)   ; *bchar@ptr:0'
             ├ %173 = .comment_line - tok[177..178]
             │  └ token: .comment '// %4 = bchar.const 'h'                   ; 'h' bchar'
             ├ %174 = .comment_line - tok[178..179]
             │  └ token: .comment '// %5 = store %3 %4                       ; void'
             ├ %179 = .const_decl - tok[179..185]
             │  ├ name: %175 = .identifier - tok[180..180]
             │  │  └ token: .identifier 'a'
             │  ├ type: NONE
             │  └ value: %178 = .array_prop_access - tok[182..185]
             │     ├ lhs: %176 = .identifier - tok[182..182]
             │     │  └ token: .identifier 'foo'
             │     └ rhs: %177 = .number_literal - tok[184..184]
             │        └ token: .number_literal '0'
             ├ %184 = .assign - tok[187..192]
             │  ├ lhs: %182 = .array_prop_access - tok[187..190]
             │  │  ├ lhs: %180 = .identifier - tok[187..187]
             │  │  │  └ token: .identifier 'foo'
             │  │  └ rhs: %181 = .number_literal - tok[189..189]
             │  │     └ token: .number_literal '0'
             │  └ rhs: %183 = .char_literal - tok[192..192]
             │     └ token: .char_literal ''h''
             ├ %189 = .const_decl - tok[194..200]
             │  ├ name: %185 = .identifier - tok[195..195]
             │  │  └ token: .identifier 'b'
             │  ├ type: NONE
             │  └ value: %188 = .array_prop_access - tok[197..200]
             │     ├ lhs: %186 = .identifier - tok[197..197]
             │     │  └ token: .identifier 'foo'
             │     └ rhs: %187 = .number_literal - tok[199..199]
             │        └ token: .number_literal '0'
             └ %190 = .comment_line - tok[202..203]
                └ token: .comment '//  = 'h';'
