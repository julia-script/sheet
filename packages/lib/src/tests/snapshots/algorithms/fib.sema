;; Sema
;; 1 declarations
;; 5 entities
;; 1 symbols
;; 50 instructions
;; 6 values
;; 3 types
;; 1 lists
;; 9 strings
;; 0/0 comptime memory used/allocated bytes

%0 = pub fn @"algorithms/fib.sk::fib"(i32) -> i32
 └ %0: void = .block: [%1-%49]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ !%2: number = .constant                                         ; number{ 0 }
    ├ !%3: typeof(i32) = .type                                        ; typeof(i32)
    ├ %4: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %5: i32 = .constant                                             ; i32{ 0 }
    ├ %6: void = .store operand=(%4) payload=(%5)                     ; void
    ├ !%7: number = .constant                                         ; number{ 1 }
    ├ !%8: typeof(i32) = .type                                        ; typeof(i32)
    ├ %9: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %10: i32 = .constant                                            ; i32{ 1 }
    ├ %11: void = .store operand=(%9) payload=(%10)                   ; void
    ├ %12: i32 = .param_get operand=(%1)                              ; i32{ [runtime] }
    ├ !%13: number = .constant                                        ; number{ 0 }
    ├ %14: i32 = .constant                                            ; i32{ 0 }
    ├ %15: bool = .gt lhs=(%12) rhs=(%14)                             ; bool{ [runtime] }
    ├ %16: if (%15) then: [%17-%45]
    │  └ %17: void = .block: [%18-%45]                                ; void
    │     ├ %18 loop: [%19-%41]
    │     │  └ %19: void = .block: [%20-%41]                          ; void
    │     │     ├ %20: i32 = .param_get operand=(%1)                  ; i32{ [runtime] }
    │     │     ├ !%21: number = .constant                            ; number{ 1 }
    │     │     ├ %22: i32 = .constant                                ; i32{ 1 }
    │     │     ├ %23: bool = .gt lhs=(%20) rhs=(%22)                 ; bool{ [runtime] }
    │     │     └ %24: if (%23) then: [%25-%41]
    │     │        └ %25: void = .block: [%26-%41]                    ; void
    │     │           ├ %26: i32 = .load operand=(%4)                 ; i32{ [runtime] }
    │     │           ├ %27: i32 = .load operand=(%9)                 ; i32{ [runtime] }
    │     │           ├ %28: i32 = .add lhs=(%26) rhs=(%27)           ; i32{ [runtime] }
    │     │           ├ !%29: typeof(i32) = .type                     ; typeof(i32)
    │     │           ├ %30: *i32 = .alloc type=(i32) mutable=(true)  ; *i32[runtime]
    │     │           ├ %31: void = .store operand=(%30) payload=(%28); void
    │     │           ├ %32: i32 = .load operand=(%9)                 ; i32{ [runtime] }
    │     │           ├ %33: void = .store operand=(%4) payload=(%32) ; void
    │     │           ├ %34: i32 = .load operand=(%30)                ; i32{ [runtime] }
    │     │           ├ %35: void = .store operand=(%9) payload=(%34) ; void
    │     │           ├ %36: i32 = .param_get operand=(%1)            ; i32{ [runtime] }
    │     │           ├ !%37: number = .constant                      ; number{ 1 }
    │     │           ├ %38: i32 = .constant                          ; i32{ 1 }
    │     │           ├ %39: i32 = .sub lhs=(%36) rhs=(%38)           ; i32{ [runtime] }
    │     │           ├ %40: void = .param_set operand=(%1) payload=(%39); void
    │     │           └ %41: void = .br operand=(%18)                 ; void
    │     ├ %42: i32 = .load operand=(%9)                             ; i32{ [runtime] }
    │     ├ !%43: typeof(i32) = .type                                 ; typeof(i32)
    │     ├ %44: i32 = .cast operand=(%42)                            ; i32{ [runtime] }
    │     └ %45: void = .ret maybe_operand=(%44)                      ; void
    ├ %46: i32 = .load operand=(%4)                                   ; i32{ [runtime] }
    ├ !%47: typeof(i32) = .type                                       ; typeof(i32)
    ├ %48: i32 = .cast operand=(%46)                                  ; i32{ [runtime] }
    └ %49: void = .ret maybe_operand=(%48)                            ; void

