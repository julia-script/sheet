;; Sema
;; 1 declarations
;; 5 entities
;; 1 symbols
;; 48 instructions
;; 6 values
;; 2 types
;; 1 lists
;; 9 strings
;; 0/0 comptime memory used/allocated bytes

%0 = pub fn @"algorithms/fib.sk::fib"(i32) -> i32
 └ %0: void = .block: [%1-%47]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: number = .constant                                          ; number{ 0 }
    ├ !%3: type = .type                                               ; type(i32)
    ├ %4: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %5: void = .store operand=(%4) payload=(%2)                     ; void
    ├ %6: number = .constant                                          ; number{ 1 }
    ├ !%7: type = .type                                               ; type(i32)
    ├ %8: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %9: void = .store operand=(%8) payload=(%6)                     ; void
    ├ %10: i32 = .param_get operand=(%1)                              ; i32{ [runtime] }
    ├ !%11: number = .constant                                        ; number{ 0 }
    ├ %12: i32 = .constant                                            ; i32{ 0 }
    ├ %13: bool = .gt lhs=(%10) rhs=(%12)                             ; bool{ [runtime] }
    ├ %14: if (%13) then: [%15-%43]
    │  └ %15: void = .block: [%16-%43]                                ; void
    │     ├ %16 loop: [%17-%39]
    │     │  └ %17: void = .block: [%18-%39]                          ; void
    │     │     ├ %18: i32 = .param_get operand=(%1)                  ; i32{ [runtime] }
    │     │     ├ !%19: number = .constant                            ; number{ 1 }
    │     │     ├ %20: i32 = .constant                                ; i32{ 1 }
    │     │     ├ %21: bool = .gt lhs=(%18) rhs=(%20)                 ; bool{ [runtime] }
    │     │     └ %22: if (%21) then: [%23-%39]
    │     │        └ %23: void = .block: [%24-%39]                    ; void
    │     │           ├ %24: i32 = .load operand=(%4)                 ; i32{ [runtime] }
    │     │           ├ %25: i32 = .load operand=(%8)                 ; i32{ [runtime] }
    │     │           ├ %26: i32 = .add lhs=(%24) rhs=(%25)           ; i32{ [runtime] }
    │     │           ├ !%27: type = .type                            ; type(i32)
    │     │           ├ %28: *i32 = .alloc type=(i32) mutable=(true)  ; *i32[runtime]
    │     │           ├ %29: void = .store operand=(%28) payload=(%26); void
    │     │           ├ %30: i32 = .load operand=(%8)                 ; i32{ [runtime] }
    │     │           ├ %31: void = .store operand=(%4) payload=(%30) ; void
    │     │           ├ %32: i32 = .load operand=(%28)                ; i32{ [runtime] }
    │     │           ├ %33: void = .store operand=(%8) payload=(%32) ; void
    │     │           ├ %34: i32 = .param_get operand=(%1)            ; i32{ [runtime] }
    │     │           ├ !%35: number = .constant                      ; number{ 1 }
    │     │           ├ %36: i32 = .constant                          ; i32{ 1 }
    │     │           ├ %37: i32 = .sub lhs=(%34) rhs=(%36)           ; i32{ [runtime] }
    │     │           ├ %38: void = .param_set operand=(%1) payload=(%37); void
    │     │           └ %39: void = .br operand=(%16)                 ; void
    │     ├ %40: i32 = .load operand=(%8)                             ; i32{ [runtime] }
    │     ├ !%41: type = .type                                        ; type(i32)
    │     ├ %42: i32 = .cast operand=(%40)                            ; i32{ [runtime] }
    │     └ %43: void = .ret maybe_operand=(%42)                      ; void
    ├ %44: i32 = .load operand=(%4)                                   ; i32{ [runtime] }
    ├ !%45: type = .type                                              ; type(i32)
    ├ %46: i32 = .cast operand=(%44)                                  ; i32{ [runtime] }
    └ %47: void = .ret maybe_operand=(%46)                            ; void

