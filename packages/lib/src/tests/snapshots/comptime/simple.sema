;; Sema
;; 3 declarations
;; 19 entities
;; 3 symbols
;; 64 instructions
;; 18 values
;; 6 types
;; 7 lists
;; 28 strings
;; 16/20 comptime memory used/allocated bytes

%0 = fn @"comptime/simple.sk::sum_all"(i32, i32, i32, i32) -> i32
 └ %0: void = .block: [%1-%17]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: i32 = .param index=(%1)                                     ; i32{ [runtime] }
    ├ %3: i32 = .param index=(%2)                                     ; i32{ [runtime] }
    ├ %4: i32 = .param index=(%3)                                     ; i32{ [runtime] }
    ├ %5: fn(i32, i32) i32 = .global_get declaration=(%2)             ; fn(i32, i32) i32
    ├ %6: fn(i32, i32) i32 = .global_get declaration=(%2)             ; fn(i32, i32) i32
    ├ %7: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ %8: i32 = .param_get operand=(%2)                               ; i32{ [runtime] }
    ├ %9: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%7, %8}); i32{ [runtime] }
    ├ %10: fn(i32, i32) i32 = .global_get declaration=(%2)            ; fn(i32, i32) i32
    ├ %11: i32 = .param_get operand=(%3)                              ; i32{ [runtime] }
    ├ %12: i32 = .param_get operand=(%4)                              ; i32{ [runtime] }
    ├ %13: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%11, %12}); i32{ [runtime] }
    ├ %14: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%9, %13}); i32{ [runtime] }
    ├ !%15: typeof(i32) = .type                                       ; typeof(i32)
    ├ %16: i32 = .cast operand=(%14)                                  ; i32{ [runtime] }
    └ %17: void = .ret maybe_operand=(%16)                            ; void

%1 = fn @"comptime/simple.sk::main"() -> void
 └ %0: void = .block: [%1-%36]                                        ; void
    ├ %1: i32 = .block: [%2-%12]                                      ; i32{ 10 }
    │  ├ %2: fn(i32, i32, i32, i32) i32 = .global_get declaration=(%0); fn(i32, i32, i32, i32) i32
    │  ├ !%3: number = .constant                                      ; number{ 1 }
    │  ├ !%4: number = .constant                                      ; number{ 2 }
    │  ├ !%5: number = .constant                                      ; number{ 3 }
    │  ├ !%6: number = .constant                                      ; number{ 4 }
    │  ├ !%7: i32 = .constant                                         ; i32{ 1 }
    │  ├ !%8: i32 = .constant                                         ; i32{ 2 }
    │  ├ !%9: i32 = .constant                                         ; i32{ 3 }
    │  ├ !%10: i32 = .constant                                        ; i32{ 4 }
    │  ├ !%11: i32 = .fn_call callee_entity=(%1) callee=(%0) args_list=({%7, %8, %9, %10}); i32{ 10 }
    │  └ !%12: void = .br operand=(%1)                                ; void
    ├ %14: *i32 = .alloc type=(i32) mutable=(false)                   ; *i32@0
    ├ %15: void = .store operand=(%14) payload=(%1)                   ; void
    ├ %16: fn(i32, i32, i32, i32) i32 = .global_get declaration=(%0)  ; fn(i32, i32, i32, i32) i32
    ├ !%17: number = .constant                                        ; number{ 1 }
    ├ !%18: number = .constant                                        ; number{ 2 }
    ├ !%19: number = .constant                                        ; number{ 3 }
    ├ !%20: number = .constant                                        ; number{ 4 }
    ├ %21: i32 = .constant                                            ; i32{ 1 }
    ├ %22: i32 = .constant                                            ; i32{ 2 }
    ├ %23: i32 = .constant                                            ; i32{ 3 }
    ├ %24: i32 = .constant                                            ; i32{ 4 }
    ├ %25: i32 = .fn_call callee_entity=(%1) callee=(%0) args_list=({%21, %22, %23, %24}); i32{ [runtime] }
    ├ !%26: type = .typeof operand=(%25)                              ; type(i32)
    ├ %27: *i32 = .alloc type=(i32) mutable=(false)                   ; *i32@4
    ├ %28: void = .store operand=(%27) payload=(%25)                  ; void
    ├ %29: number = .block: [%30-%33]                                 ; number{ 5 }
    │  ├ !%30: number = .constant                                     ; number{ 2 }
    │  ├ !%31: number = .constant                                     ; number{ 3 }
    │  ├ !%32: number = .constant                                     ; number{ 5 }
    │  └ !%33: void = .br operand=(%29)                               ; void
    ├ %35: *number = .alloc type=(number) mutable=(false)             ; *number@8
    └ %36: void = .store operand=(%35) payload=(%29)                  ; void

%2 = fn @"comptime/simple.sk::add"(i32, i32) -> i32
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: i32 = .param index=(%1)                                     ; i32{ [runtime] }
    ├ %3: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ %4: i32 = .param_get operand=(%2)                               ; i32{ [runtime] }
    ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                ; i32{ [runtime] }
    ├ !%6: typeof(i32) = .type                                        ; typeof(i32)
    ├ %7: i32 = .cast operand=(%5)                                    ; i32{ [runtime] }
    └ %8: void = .ret maybe_operand=(%7)                              ; void

