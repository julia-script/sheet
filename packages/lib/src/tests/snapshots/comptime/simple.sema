;; Sema
;; 3 declarations
;; 19 entities
;; 3 symbols
;; 59 instructions
;; 16 values
;; 5 types
;; 7 lists
;; 28 strings
;; 16/20 comptime memory used/allocated bytes

%0 = fn @"comptime/simple.sk::sum_all"(i32, i32, i32, i32) -> i32
 └ %0: void = .block: [%1-%14]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; exec_time
    ├ %2: i32 = .param index=(%1)                                     ; exec_time
    ├ %3: i32 = .param index=(%2)                                     ; exec_time
    ├ %4: i32 = .param index=(%3)                                     ; exec_time
    ├ %5: i32 = .param_get operand=(%1)                               ; exec_time
    ├ %6: i32 = .param_get operand=(%2)                               ; exec_time
    ├ %7: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%5, %6}); exec_time
    ├ %8: i32 = .param_get operand=(%3)                               ; exec_time
    ├ %9: i32 = .param_get operand=(%4)                               ; exec_time
    ├ %10: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%8, %9}); exec_time
    ├ %11: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%7, %10}); exec_time
    ├ !%12: type = .type                                              ; type(i32)
    ├ %13: i32 = .cast operand=(%11)                                  ; exec_time
    └ %14: void = .ret maybe_operand=(%13)                            ; void

%1 = fn @"comptime/simple.sk::main"() -> void
 └ %0: void = .block: [%1-%34]                                        ; void
    ├ !%1: i32 = .block: [%2-%11]                                     ; int(10)
    │  ├ !%2: number = .constant                                      ; int(1)
    │  ├ !%3: number = .constant                                      ; int(2)
    │  ├ !%4: number = .constant                                      ; int(3)
    │  ├ !%5: number = .constant                                      ; int(4)
    │  ├ !%6: i32 = .constant                                         ; int(1)
    │  ├ !%7: i32 = .constant                                         ; int(2)
    │  ├ !%8: i32 = .constant                                         ; int(3)
    │  ├ !%9: i32 = .constant                                         ; int(4)
    │  ├ !%10: i32 = .fn_call callee_entity=(%1) callee=(%0) args_list=({%6, %7, %8, %9}); int(10)
    │  └ !%11: void = .br operand=(%1)                                ; void
    ├ %13: *i32 = .alloc type=(i32) mutable=(false)                   ; comp_ptr(0)
    ├ !%14: void = .store operand=(%13) payload=(%1)                  ; void
    ├ !%15: number = .constant                                        ; int(1)
    ├ !%16: number = .constant                                        ; int(2)
    ├ !%17: number = .constant                                        ; int(3)
    ├ !%18: number = .constant                                        ; int(4)
    ├ %19: i32 = .constant                                            ; int(1)
    ├ %20: i32 = .constant                                            ; int(2)
    ├ %21: i32 = .constant                                            ; int(3)
    ├ %22: i32 = .constant                                            ; int(4)
    ├ %23: i32 = .fn_call callee_entity=(%1) callee=(%0) args_list=({%19, %20, %21, %22}); exec_time
    ├ !%24: type = .typeof operand=(%23)                              ; type(i32)
    ├ %25: *i32 = .alloc type=(i32) mutable=(false)                   ; comp_ptr(4)
    ├ %26: void = .store operand=(%25) payload=(%23)                  ; void
    ├ !%27: number = .block: [%28-%31]                                ; float(5)
    │  ├ !%28: number = .constant                                     ; int(2)
    │  ├ !%29: number = .constant                                     ; int(3)
    │  ├ !%30: number = .constant                                     ; float(5)
    │  └ !%31: void = .br operand=(%27)                               ; void
    ├ %33: *number = .alloc type=(number) mutable=(false)             ; comp_ptr(8)
    └ !%34: void = .store operand=(%33) payload=(%27)                 ; void

%2 = fn @"comptime/simple.sk::add"(i32, i32) -> i32
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; exec_time
    ├ %2: i32 = .param index=(%1)                                     ; exec_time
    ├ %3: i32 = .param_get operand=(%1)                               ; exec_time
    ├ %4: i32 = .param_get operand=(%2)                               ; exec_time
    ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                ; exec_time
    ├ !%6: type = .type                                               ; type(i32)
    ├ %7: i32 = .cast operand=(%5)                                    ; exec_time
    └ %8: void = .ret maybe_operand=(%7)                              ; void

