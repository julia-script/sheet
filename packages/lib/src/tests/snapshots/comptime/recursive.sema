;; Sema
;; 4 declarations
;; 15 entities
;; 4 symbols
;; 53 instructions
;; 16 values
;; 5 types
;; 4 lists
;; 22 strings
;; 0/0 comptime memory used/allocated bytes

%0 = fn @"comptime/recursive.sk::foo"(i32) -> i32
 └ %0: void = .block: [%1-%5]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ !%3: typeof(i32) = .type                                        ; typeof(i32)
    ├ %4: i32 = .cast operand=(%2)                                    ; i32{ [runtime] }
    └ %5: void = .ret maybe_operand=(%4)                              ; void

%1 = fn @"comptime/recursive.sk::bar"(i32) -> i32
 └ %0: void = .block: [%1-%7]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: fn(i32) i32 = .global_get declaration=(%2)                  ; fn(i32) i32
    ├ %3: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ %4: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%3}); i32{ [runtime] }
    ├ !%5: typeof(i32) = .type                                        ; typeof(i32)
    ├ %6: i32 = .cast operand=(%4)                                    ; i32{ [runtime] }
    └ %7: void = .ret maybe_operand=(%6)                              ; void

%2 = fn @"comptime/recursive.sk::rec"(i32) -> i32
 └ %0: void = .block: [%1-%20]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ !%3: number = .constant                                         ; number{ 10 }
    ├ %4: i32 = .constant                                             ; i32{ 10 }
    ├ %5: bool = .lt lhs=(%2) rhs=(%4)                                ; bool{ [runtime] }
    ├ %6: if (%5) then: [%7-%16]
    │  └ %7: void = .block: [%8-%16]                                  ; void
    │     ├ %8: fn(i32) i32 = .global_get declaration=(%1)            ; fn(i32) i32
    │     ├ !%9: number = .constant                                   ; number{ 2 }
    │     ├ %10: i32 = .param_get operand=(%1)                        ; i32{ [runtime] }
    │     ├ %11: i32 = .constant                                      ; i32{ 2 }
    │     ├ %12: i32 = .mul lhs=(%11) rhs=(%10)                       ; i32{ [runtime] }
    │     ├ %13: i32 = .fn_call callee_entity=(%2) callee=(%1) args_list=({%12}); i32{ [runtime] }
    │     ├ !%14: typeof(i32) = .type                                 ; typeof(i32)
    │     ├ %15: i32 = .cast operand=(%13)                            ; i32{ [runtime] }
    │     └ %16: void = .ret maybe_operand=(%15)                      ; void
    ├ %17: i32 = .param_get operand=(%1)                              ; i32{ [runtime] }
    ├ !%18: typeof(i32) = .type                                       ; typeof(i32)
    ├ %19: i32 = .cast operand=(%17)                                  ; i32{ [runtime] }
    └ %20: void = .ret maybe_operand=(%19)                            ; void

%3 = fn @"comptime/recursive.sk::main"() -> void
 └ %0: void = .block: [%1-%9]                                         ; void
    └ %1: bool = .block: [%2-%9]                                      ; true
       ├ %2: fn(i32) i32 = .global_get declaration=(%2)               ; fn(i32) i32
       ├ !%3: number = .constant                                      ; number{ 1 }
       ├ !%4: i32 = .constant                                         ; i32{ 1 }
       ├ !%5: i32 = .fn_call callee_entity=(%3) callee=(%2) args_list=({%4}); i32{ 16 }
       ├ !%6: number = .constant                                      ; number{ 16 }
       ├ !%7: i32 = .constant                                         ; i32{ 16 }
       ├ !%8: bool = .constant                                        ; true
       └ !%9: void = .br operand=(%1)                                 ; void

