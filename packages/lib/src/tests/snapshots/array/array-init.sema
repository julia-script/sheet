;; Sema
;; 8 declarations
;; 17 entities
;; 8 symbols
;; 93 instructions
;; 33 values
;; 29 types
;; 4 lists
;; 27 strings
;; 36/38 comptime memory used/allocated bytes

%0 = fn @"array/array-init.sk::var_array"() -> void
 └ %0: void = .block: [%1-%15]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 1 }
    ├ !%3: usize = .constant                                          ; usize{ 1 }
    ├ !%4: typeof([1]i32) = .type                                     ; typeof([1]i32)
    ├ !%5: number = .constant                                         ; number{ 33 }
    ├ !%6: [1]i32 = .array_init                                       ; todo_complex(array)
    ├ !%7: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%8: number = .constant                                         ; number{ 1 }
    ├ !%9: usize = .constant                                          ; usize{ 1 }
    ├ !%10: typeof([1]i32) = .type                                    ; typeof([1]i32)
    ├ %11: *[1]i32 = .alloc type=([1]i32) mutable=(false)             ; *[1]i32@0
    ├ %12: usize = .constant                                          ; usize{ 0 }
    ├ %13: *i32 = .get_element_pointer base=(%11) index=(%12)         ; *i32@0
    ├ %14: i32 = .constant                                            ; i32{ 33 }
    └ %15: void = .store operand=(%13) payload=(%14)                  ; void

%1 = fn @"array/array-init.sk::var_array_infer_type"() -> void
 └ %0: void = .block: [%1-%22]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 3 }
    ├ !%3: usize = .constant                                          ; usize{ 3 }
    ├ !%4: typeof([3]i32) = .type                                     ; typeof([3]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: [3]i32 = .array_init                                       ; todo_complex(array)
    ├ !%9: type = .typeof operand=(%8)                                ; type([3]i32)
    ├ %10: *[3]i32 = .alloc type=([3]i32) mutable=(true)              ; *[3]i32@4
    ├ %11: usize = .constant                                          ; usize{ 0 }
    ├ %12: *i32 = .get_element_pointer base=(%10) index=(%11)         ; *i32@4
    ├ %13: i32 = .constant                                            ; i32{ 1 }
    ├ %14: void = .store operand=(%12) payload=(%13)                  ; void
    ├ %15: usize = .constant                                          ; usize{ 4 }
    ├ %16: *i32 = .get_element_pointer base=(%10) index=(%15)         ; *i32@8
    ├ %17: i32 = .constant                                            ; i32{ 2 }
    ├ %18: void = .store operand=(%16) payload=(%17)                  ; void
    ├ %19: usize = .constant                                          ; usize{ 8 }
    ├ %20: *i32 = .get_element_pointer base=(%10) index=(%19)         ; *i32@c
    ├ %21: i32 = .constant                                            ; i32{ 3 }
    └ %22: void = .store operand=(%20) payload=(%21)                  ; void

%2 = fn @"array/array-init.sk::var_int"() -> void
 └ %0: void = .block: [%1-%5]                                         ; void
    ├ !%1: number = .constant                                         ; number{ 2 }
    ├ !%2: typeof(i32) = .type                                        ; typeof(i32)
    ├ %3: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    ├ %4: i32 = .constant                                             ; i32{ 2 }
    └ %5: void = .store operand=(%3) payload=(%4)                     ; void

%3 = fn @"array/array-init.sk::var_int_infer_type"() -> void
 └ %0: void = .block: [%1-%7]                                         ; void
    ├ !%1: number = .constant                                         ; number{ 2 }
    ├ !%2: [builtin_as] = .constant operand=(%1)                      ; todo_complex(builtin_member)
    ├ !%3: typeof(i32) = .type                                        ; typeof(i32)
    ├ %4: i32 = .constant                                             ; i32{ 2 }
    ├ !%5: type = .typeof operand=(%4)                                ; type(i32)
    ├ %6: *i32 = .alloc type=(i32) mutable=(true)                     ; *i32[runtime]
    └ %7: void = .store operand=(%6) payload=(%4)                     ; void

%4 = fn @"array/array-init.sk::const_array"() -> void
 └ %0: void = .block: [%1-%15]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 1 }
    ├ !%3: usize = .constant                                          ; usize{ 1 }
    ├ !%4: typeof([1]i32) = .type                                     ; typeof([1]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: [1]i32 = .array_init                                       ; todo_complex(array)
    ├ !%7: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%8: number = .constant                                         ; number{ 1 }
    ├ !%9: usize = .constant                                          ; usize{ 1 }
    ├ !%10: typeof([1]i32) = .type                                    ; typeof([1]i32)
    ├ %11: *[1]i32 = .alloc type=([1]i32) mutable=(false)             ; *[1]i32@10
    ├ %12: usize = .constant                                          ; usize{ 0 }
    ├ %13: *i32 = .get_element_pointer base=(%11) index=(%12)         ; *i32@10
    ├ %14: i32 = .constant                                            ; i32{ 1 }
    └ %15: void = .store operand=(%13) payload=(%14)                  ; void

%5 = fn @"array/array-init.sk::const_array_infer_type"() -> void
 └ %0: void = .block: [%1-%12]                                        ; void
    ├ !%1: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%2: number = .constant                                         ; number{ 1 }
    ├ !%3: usize = .constant                                          ; usize{ 1 }
    ├ !%4: typeof([1]i32) = .type                                     ; typeof([1]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: [1]i32 = .array_init                                       ; todo_complex(array)
    ├ !%7: type = .typeof operand=(%6)                                ; type([1]i32)
    ├ %8: *[1]i32 = .alloc type=([1]i32) mutable=(false)              ; *[1]i32@14
    ├ %9: usize = .constant                                           ; usize{ 0 }
    ├ %10: *i32 = .get_element_pointer base=(%8) index=(%9)           ; *i32@14
    ├ %11: i32 = .constant                                            ; i32{ 1 }
    └ %12: void = .store operand=(%10) payload=(%11)                  ; void

%6 = fn @"array/array-init.sk::const_int"() -> void
 └ %0: void = .block: [%1-%5]                                         ; void
    ├ !%1: number = .constant                                         ; number{ 2 }
    ├ !%2: typeof(i32) = .type                                        ; typeof(i32)
    ├ %3: *i32 = .alloc type=(i32) mutable=(false)                    ; *i32@18
    ├ %4: i32 = .constant                                             ; i32{ 2 }
    └ %5: void = .store operand=(%3) payload=(%4)                     ; void

%7 = fn @"array/array-init.sk::const_int_infer_type"() -> void
 └ %0: void = .block: [%1-%4]                                         ; void
    ├ %1: number = .constant                                          ; number{ 2 }
    ├ !%2: type = .typeof operand=(%1)                                ; type(number)
    ├ %3: *number = .alloc type=(number) mutable=(false)              ; *number@1c
    └ %4: void = .store operand=(%3) payload=(%1)                     ; void

