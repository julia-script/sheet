;; Sema
;; 1 declarations
;; 3 entities
;; 1 symbols
;; 65 instructions
;; 16 values
;; 4 types
;; 1 lists
;; 7 strings
;; 16/20 comptime memory used/allocated bytes

%0 = fn @"array/sum-array.sk::sum_array"() -> i32
 └ %0: void = .block: [%1-%64]                                        ; void
    ├ !%1: type = .type                                               ; type(i32)
    ├ !%2: number = .constant                                         ; number{ 4 }
    ├ !%3: usize = .constant                                          ; usize{ 4 }
    ├ !%4: type = .type                                               ; type([4]i32)
    ├ !%5: number = .constant                                         ; number{ 1 }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: number = .constant                                         ; number{ 4 }
    ├ !%9: [4]i32 = .array_init                                       ; todo_complex(1)
    ├ !%10: type = .type                                              ; type(i32)
    ├ !%11: number = .constant                                        ; number{ 4 }
    ├ !%12: usize = .constant                                         ; usize{ 4 }
    ├ !%13: type = .type                                              ; type([4]i32)
    ├ %14: [..]i32 = .alloc type=([4]i32) mutable=(false)             ; [..4]i32@0
    ├ %15: i32 = .constant                                            ; i32{ 1 }
    ├ %16: usize = .constant                                          ; usize{ 0 }
    ├ %17: *i32 = .get_element_pointer base=(%14) index=(%16)         ; *i32@0
    ├ %18: void = .store operand=(%17) payload=(%15)                  ; void
    ├ %19: i32 = .constant                                            ; i32{ 2 }
    ├ %20: usize = .constant                                          ; usize{ 1 }
    ├ %21: *i32 = .get_element_pointer base=(%14) index=(%20)         ; *i32@4
    ├ %22: void = .store operand=(%21) payload=(%19)                  ; void
    ├ %23: i32 = .constant                                            ; i32{ 3 }
    ├ %24: usize = .constant                                          ; usize{ 2 }
    ├ %25: *i32 = .get_element_pointer base=(%14) index=(%24)         ; *i32@8
    ├ %26: void = .store operand=(%25) payload=(%23)                  ; void
    ├ %27: i32 = .constant                                            ; i32{ 4 }
    ├ %28: usize = .constant                                          ; usize{ 3 }
    ├ %29: *i32 = .get_element_pointer base=(%14) index=(%28)         ; *i32@c
    ├ %30: void = .store operand=(%29) payload=(%27)                  ; void
    ├ %31: number = .constant                                         ; number{ 0 }
    ├ !%32: type = .type                                              ; type(i32)
    ├ %33: *i32 = .alloc type=(i32) mutable=(true)                    ; *i32[runtime]
    ├ %34: void = .store operand=(%33) payload=(%31)                  ; void
    ├ %35: number = .constant                                         ; number{ 0 }
    ├ !%36: type = .type                                              ; type(i32)
    ├ %37: *i32 = .alloc type=(i32) mutable=(true)                    ; *i32[runtime]
    ├ %38: void = .store operand=(%37) payload=(%35)                  ; void
    ├ %39 loop: [%40-%60]
    │  └ %40: void = .block: [%41-%60]                                ; void
    │     ├ %41: i32 = .load operand=(%33)                            ; i32{ [runtime] }
    │     ├ !%42: usize = .constant                                   ; usize{ 4 }
    │     ├ !%43: builtin_fn_as = .get_builtin_fn_as operand=(%42)    ; builtin_fn_as
    │     ├ !%44: type = .type                                        ; type(i32)
    │     ├ %45: i32 = .cast_reinterpret operand=(%42)                ; i32{ 4 }
    │     ├ %46: bool = .lt lhs=(%41) rhs=(%45)                       ; bool{ [runtime] }
    │     └ %47: if (%46) then: [%48-%60]
    │        └ %48: void = .block: [%49-%60]                          ; void
    │           ├ %49: i32 = .load operand=(%37)                      ; i32{ [runtime] }
    │           ├ %50: i32 = .load operand=(%33)                      ; i32{ [runtime] }
    │           ├ %51: *i32 = .get_element_pointer base=(%14) index=(%50); *i32[runtime]
    │           ├ %52: i32 = .load operand=(%51)                      ; i32{ [runtime] }
    │           ├ %53: i32 = .add lhs=(%49) rhs=(%52)                 ; i32{ [runtime] }
    │           ├ %54: void = .store operand=(%37) payload=(%53)      ; void
    │           ├ %55: i32 = .load operand=(%33)                      ; i32{ [runtime] }
    │           ├ !%56: number = .constant                            ; number{ 1 }
    │           ├ %57: i32 = .constant                                ; i32{ 1 }
    │           ├ %58: i32 = .add lhs=(%55) rhs=(%57)                 ; i32{ [runtime] }
    │           ├ %59: void = .store operand=(%33) payload=(%58)      ; void
    │           └ %60: void = .br operand=(%39)                       ; void
    ├ %61: i32 = .load operand=(%37)                                  ; i32{ [runtime] }
    ├ !%62: type = .type                                              ; type(i32)
    ├ %63: i32 = .cast operand=(%61)                                  ; i32{ [runtime] }
    └ %64: void = .ret maybe_operand=(%63)                            ; void

