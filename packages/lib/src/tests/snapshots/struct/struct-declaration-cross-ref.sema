;; Sema
;; 2 declarations
;; 11 entities
;; 2 symbols
;; 29 instructions
;; 17 values
;; 10 types
;; 2 lists
;; 19 strings
;; 12/20 comptime memory used/allocated bytes

%0 = fn @"struct/struct-declaration-cross-ref.sk::main"() -> i32
 └ %0: void = .block: [%1-%25]                                        ; void
    ├ !%1: typeof(struct{i32, i32, i8}) = .global_get declaration=(%1); typeof(struct{i32, i32, i8})
    ├ !%2: number = .constant                                         ; number{ 1 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: number = .constant                                         ; number{ 2 }
    ├ !%5: void = .field_init                                         ; void
    ├ !%6: number = .constant                                         ; number{ 3 }
    ├ !%7: void = .field_init                                         ; void
    ├ !%8: struct{i32, i32, i8} = .type_init                          ; todo_complex(struct)
    ├ !%9: typeof(struct{i32, i32, i8}) = .global_get declaration=(%1); typeof(struct{i32, i32, i8})
    ├ %10: *struct{i32, i32, i8} = .alloc type=(struct{i32, i32, i8}) mutable=(false); *struct{i32, i32, i8}@0
    ├ %11: i8 = .cast operand=(%2)                                    ; i8{ 1 }
    ├ %12: *i8 = .get_element_pointer base=(%10) index=(%2)           ; *i8@8
    ├ %13: void = .store operand=(%12) payload=(%11)                  ; void
    ├ %14: i32 = .cast operand=(%4)                                   ; i32{ 2 }
    ├ %15: *i32 = .get_element_pointer base=(%10) index=(%0)          ; *i32@0
    ├ %16: void = .store operand=(%15) payload=(%14)                  ; void
    ├ %17: i32 = .cast operand=(%6)                                   ; i32{ 3 }
    ├ %18: *i32 = .get_element_pointer base=(%10) index=(%1)          ; *i32@4
    ├ %19: void = .store operand=(%18) payload=(%17)                  ; void
    ├ %20: usize = .constant                                          ; usize{ 0 }
    ├ %21: *i32 = .get_element_pointer base=(%10) index=(%20)         ; *i32@0
    ├ !%22: i32 = .load operand=(%21)                                 ; i32{ 2 }
    ├ !%23: typeof(i32) = .type                                       ; typeof(i32)
    ├ %24: i32 = .cast operand=(%22)                                  ; i32{ 2 }
    └ %25: void = .ret maybe_operand=(%24)                            ; void

%1 = type @"struct/struct-declaration-cross-ref.sk::A" = struct:
 ├ type: struct{i32, i32, i8}
 ├ alignment: 4
 ├ size: 12
 └ fields: 3
    ├ [0]
    │  ├ alignment: 4
    │  ├ size: 4
    │  ├ offset: 0
    │  └ type: i32
    ├ [1]
    │  ├ alignment: 4
    │  ├ size: 4
    │  ├ offset: 4
    │  └ type: i32
    └ [2]
       ├ alignment: 1
       ├ size: 1
       ├ offset: 8
       └ type: i8


