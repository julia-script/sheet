;; Sema
;; 4 declarations
;; 21 entities
;; 4 symbols
;; 83 instructions
;; 16 values
;; 8 types
;; 1 lists
;; 34 strings

%0 = type @struct/struct-declaration-cross-ref2.sk::A = mod{ent{3}, {usize, i32, i32}}

%1 = type @struct/struct-declaration-cross-ref2.sk::B = mod{ent{11}, {usize, i32, i32}}

%2 = pub @struct/struct-declaration-cross-ref2.sk::A::mod::foo() -> void
 └ %0: void = .block: [%1-%37]                                        ; void
    ├ !%1: type = .global_get declaration=(%1)                        ; type(mod{ent{11}, {usize, i32, i32}})
    ├ %2: *mod{ent{11}, {usize, i32, i32}} = .alloc type=(mod{ent{11}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %3: *usize = .get_element_pointer base=(%2) index=(0)           ; exec_time
    ├ !%4: number = .constant                                         ; int(4)
    ├ %5: usize = .constant                                           ; int(4)
    ├ %6: void = .store operand=(%3) payload=(%5)                     ; void
    ├ %7: *i32 = .get_element_pointer base=(%2) index=(1)             ; exec_time
    ├ !%8: number = .constant                                         ; int(5)
    ├ %9: i32 = .constant                                             ; int(5)
    ├ %10: void = .store operand=(%7) payload=(%9)                    ; void
    ├ %11: *i32 = .get_element_pointer base=(%2) index=(2)            ; exec_time
    ├ !%12: number = .constant                                        ; int(6)
    ├ %13: i32 = .constant                                            ; int(6)
    ├ %14: void = .store operand=(%11) payload=(%13)                  ; void
    ├ %15: mod{ent{11}, {usize, i32, i32}} = .load operand=(%2)       ; exec_time
    ├ !%16: type = .global_get declaration=(%1)                       ; type(mod{ent{11}, {usize, i32, i32}})
    ├ %17: *mod{ent{11}, {usize, i32, i32}} = .alloc type=(mod{ent{11}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %18: void = .store operand=(%17) payload=(%15)                  ; void
    ├ !%19: type = .global_get declaration=(%0)                       ; type(mod{ent{3}, {usize, i32, i32}})
    ├ %20: *mod{ent{3}, {usize, i32, i32}} = .alloc type=(mod{ent{3}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %21: *usize = .get_element_pointer base=(%20) index=(0)         ; exec_time
    ├ !%22: number = .constant                                        ; int(1)
    ├ %23: usize = .constant                                          ; int(1)
    ├ %24: void = .store operand=(%21) payload=(%23)                  ; void
    ├ %25: *i32 = .get_element_pointer base=(%20) index=(1)           ; exec_time
    ├ !%26: number = .constant                                        ; int(2)
    ├ %27: i32 = .constant                                            ; int(2)
    ├ %28: void = .store operand=(%25) payload=(%27)                  ; void
    ├ %29: *i32 = .get_element_pointer base=(%20) index=(2)           ; exec_time
    ├ !%30: number = .constant                                        ; int(3)
    ├ %31: i32 = .constant                                            ; int(3)
    ├ %32: void = .store operand=(%29) payload=(%31)                  ; void
    ├ %33: mod{ent{3}, {usize, i32, i32}} = .load operand=(%20)       ; exec_time
    ├ !%34: type = .global_get declaration=(%0)                       ; type(mod{ent{3}, {usize, i32, i32}})
    ├ %35: *mod{ent{3}, {usize, i32, i32}} = .alloc type=(mod{ent{3}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %36: void = .store operand=(%35) payload=(%33)                  ; void
    └ %37: todo(function) = .global_get declaration=(%3)              ; exec_time

%3 = pub @struct/struct-declaration-cross-ref2.sk::B::mod::bar() -> void
 └ %0: void = .block: [%1-%38]                                        ; void
    ├ !%1: type = .global_get declaration=(%0)                        ; type(mod{ent{3}, {usize, i32, i32}})
    ├ %2: *mod{ent{3}, {usize, i32, i32}} = .alloc type=(mod{ent{3}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %3: *usize = .get_element_pointer base=(%2) index=(0)           ; exec_time
    ├ !%4: number = .constant                                         ; int(1)
    ├ %5: usize = .constant                                           ; int(1)
    ├ %6: void = .store operand=(%3) payload=(%5)                     ; void
    ├ %7: *i32 = .get_element_pointer base=(%2) index=(1)             ; exec_time
    ├ !%8: number = .constant                                         ; int(2)
    ├ %9: i32 = .constant                                             ; int(2)
    ├ %10: void = .store operand=(%7) payload=(%9)                    ; void
    ├ %11: *i32 = .get_element_pointer base=(%2) index=(2)            ; exec_time
    ├ !%12: number = .constant                                        ; int(3)
    ├ %13: i32 = .constant                                            ; int(3)
    ├ %14: void = .store operand=(%11) payload=(%13)                  ; void
    ├ %15: mod{ent{3}, {usize, i32, i32}} = .load operand=(%2)        ; exec_time
    ├ !%16: type = .global_get declaration=(%0)                       ; type(mod{ent{3}, {usize, i32, i32}})
    ├ %17: *mod{ent{3}, {usize, i32, i32}} = .alloc type=(mod{ent{3}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %18: void = .store operand=(%17) payload=(%15)                  ; void
    ├ !%19: type = .global_get declaration=(%1)                       ; type(mod{ent{11}, {usize, i32, i32}})
    ├ %20: *mod{ent{11}, {usize, i32, i32}} = .alloc type=(mod{ent{11}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %21: *usize = .get_element_pointer base=(%20) index=(0)         ; exec_time
    ├ !%22: number = .constant                                        ; int(4)
    ├ %23: usize = .constant                                          ; int(4)
    ├ %24: void = .store operand=(%21) payload=(%23)                  ; void
    ├ %25: *i32 = .get_element_pointer base=(%20) index=(1)           ; exec_time
    ├ !%26: number = .constant                                        ; int(5)
    ├ %27: i32 = .constant                                            ; int(5)
    ├ %28: void = .store operand=(%25) payload=(%27)                  ; void
    ├ %29: *i32 = .get_element_pointer base=(%20) index=(2)           ; exec_time
    ├ !%30: number = .constant                                        ; int(6)
    ├ %31: i32 = .constant                                            ; int(6)
    ├ %32: void = .store operand=(%29) payload=(%31)                  ; void
    ├ %33: mod{ent{11}, {usize, i32, i32}} = .load operand=(%20)      ; exec_time
    ├ !%34: type = .global_get declaration=(%1)                       ; type(mod{ent{11}, {usize, i32, i32}})
    ├ %35: *mod{ent{11}, {usize, i32, i32}} = .alloc type=(mod{ent{11}, {usize, i32, i32}}) mutable=(false); exec_time
    ├ %36: void = .store operand=(%35) payload=(%33)                  ; void
    ├ %37: todo(function) = .global_get declaration=(%2)              ; exec_time
    └ %38: void = .fn_call callee=(%37) args_list=(interned-lists.InternedLists(usize).Range{ .start = 0, .len = 0 }); exec_time

