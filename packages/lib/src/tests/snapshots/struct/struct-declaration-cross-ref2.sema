;; Sema
;; 4 declarations
;; 21 entities
;; 4 symbols
;; 88 instructions
;; 46 values
;; 13 types
;; 3 lists
;; 34 strings
;; 64/65 comptime memory used/allocated bytes

%0 = type @"struct/struct-declaration-cross-ref2.sk::A" = struct:
 ├ type: struct{usize, i32, i32}
 ├ alignment: 8
 ├ size: 16
 └ fields: 3
    ├ [0]
    │  ├ alignment: 8
    │  ├ size: 8
    │  ├ offset: 0
    │  └ type: usize
    ├ [1]
    │  ├ alignment: 4
    │  ├ size: 4
    │  ├ offset: 8
    │  └ type: i32
    └ [2]
       ├ alignment: 4
       ├ size: 4
       ├ offset: 12
       └ type: i32


%1 = type @"struct/struct-declaration-cross-ref2.sk::B" = struct:
 ├ type: struct{usize, i32, i32}
 ├ alignment: 8
 ├ size: 16
 └ fields: 3
    ├ [0]
    │  ├ alignment: 8
    │  ├ size: 8
    │  ├ offset: 0
    │  └ type: usize
    ├ [1]
    │  ├ alignment: 4
    │  ├ size: 4
    │  ├ offset: 8
    │  └ type: i32
    └ [2]
       ├ alignment: 4
       ├ size: 4
       ├ offset: 12
       └ type: i32


%2 = pub fn @"struct/struct-declaration-cross-ref2.sk::A::mod::foo"() -> void
 └ %0: void = .block: [%1-%40]                                        ; void
    ├ !%1: typeof(struct{usize, i32, i32}) = .global_get declaration=(%1); typeof(struct{usize, i32, i32})
    ├ !%2: number = .constant                                         ; number{ 4 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: number = .constant                                         ; number{ 5 }
    ├ !%5: void = .field_init                                         ; void
    ├ !%6: number = .constant                                         ; number{ 6 }
    ├ !%7: void = .field_init                                         ; void
    ├ !%8: struct{usize, i32, i32} = .type_init                       ; todo_complex(struct)
    ├ !%9: typeof(struct{usize, i32, i32}) = .global_get declaration=(%1); typeof(struct{usize, i32, i32})
    ├ %10: *struct{usize, i32, i32} = .alloc type=(struct{usize, i32, i32}) mutable=(false); *struct{usize, i32, i32}@0
    ├ %11: usize = .constant                                          ; usize{ 4 }
    ├ %12: *usize = .get_element_pointer base=(%10) index=(%0)        ; *usize@0
    ├ %13: void = .store operand=(%12) payload=(%11)                  ; void
    ├ %14: i32 = .constant                                            ; i32{ 5 }
    ├ %15: *i32 = .get_element_pointer base=(%10) index=(%1)          ; *i32@8
    ├ %16: void = .store operand=(%15) payload=(%14)                  ; void
    ├ %17: i32 = .constant                                            ; i32{ 6 }
    ├ %18: *i32 = .get_element_pointer base=(%10) index=(%2)          ; *i32@c
    ├ %19: void = .store operand=(%18) payload=(%17)                  ; void
    ├ !%20: typeof(struct{usize, i32, i32}) = .global_get declaration=(%0); typeof(struct{usize, i32, i32})
    ├ !%21: number = .constant                                        ; number{ 1 }
    ├ !%22: void = .field_init                                        ; void
    ├ !%23: number = .constant                                        ; number{ 2 }
    ├ !%24: void = .field_init                                        ; void
    ├ !%25: number = .constant                                        ; number{ 3 }
    ├ !%26: void = .field_init                                        ; void
    ├ !%27: struct{usize, i32, i32} = .type_init                      ; todo_complex(struct)
    ├ !%28: typeof(struct{usize, i32, i32}) = .global_get declaration=(%0); typeof(struct{usize, i32, i32})
    ├ %29: *struct{usize, i32, i32} = .alloc type=(struct{usize, i32, i32}) mutable=(false); *struct{usize, i32, i32}@10
    ├ %30: usize = .constant                                          ; usize{ 1 }
    ├ %31: *usize = .get_element_pointer base=(%29) index=(%0)        ; *usize@10
    ├ %32: void = .store operand=(%31) payload=(%30)                  ; void
    ├ %33: i32 = .constant                                            ; i32{ 2 }
    ├ %34: *i32 = .get_element_pointer base=(%29) index=(%1)          ; *i32@18
    ├ %35: void = .store operand=(%34) payload=(%33)                  ; void
    ├ %36: i32 = .constant                                            ; i32{ 3 }
    ├ %37: *i32 = .get_element_pointer base=(%29) index=(%2)          ; *i32@1c
    ├ %38: void = .store operand=(%37) payload=(%36)                  ; void
    ├ %39: typeof(struct{usize, i32, i32}) = .global_get declaration=(%1); typeof(struct{usize, i32, i32})
    └ %40: type = .constant                                           ; type(fn() void)

%3 = pub fn @"struct/struct-declaration-cross-ref2.sk::B::mod::bar"() -> void
 └ %0: void = .block: [%1-%40]                                        ; void
    ├ !%1: typeof(struct{usize, i32, i32}) = .global_get declaration=(%0); typeof(struct{usize, i32, i32})
    ├ !%2: number = .constant                                         ; number{ 1 }
    ├ !%3: void = .field_init                                         ; void
    ├ !%4: number = .constant                                         ; number{ 2 }
    ├ !%5: void = .field_init                                         ; void
    ├ !%6: number = .constant                                         ; number{ 3 }
    ├ !%7: void = .field_init                                         ; void
    ├ !%8: struct{usize, i32, i32} = .type_init                       ; todo_complex(struct)
    ├ !%9: typeof(struct{usize, i32, i32}) = .global_get declaration=(%0); typeof(struct{usize, i32, i32})
    ├ %10: *struct{usize, i32, i32} = .alloc type=(struct{usize, i32, i32}) mutable=(false); *struct{usize, i32, i32}@20
    ├ %11: usize = .constant                                          ; usize{ 1 }
    ├ %12: *usize = .get_element_pointer base=(%10) index=(%0)        ; *usize@20
    ├ %13: void = .store operand=(%12) payload=(%11)                  ; void
    ├ %14: i32 = .constant                                            ; i32{ 2 }
    ├ %15: *i32 = .get_element_pointer base=(%10) index=(%1)          ; *i32@28
    ├ %16: void = .store operand=(%15) payload=(%14)                  ; void
    ├ %17: i32 = .constant                                            ; i32{ 3 }
    ├ %18: *i32 = .get_element_pointer base=(%10) index=(%2)          ; *i32@2c
    ├ %19: void = .store operand=(%18) payload=(%17)                  ; void
    ├ !%20: typeof(struct{usize, i32, i32}) = .global_get declaration=(%1); typeof(struct{usize, i32, i32})
    ├ !%21: number = .constant                                        ; number{ 4 }
    ├ !%22: void = .field_init                                        ; void
    ├ !%23: number = .constant                                        ; number{ 5 }
    ├ !%24: void = .field_init                                        ; void
    ├ !%25: number = .constant                                        ; number{ 6 }
    ├ !%26: void = .field_init                                        ; void
    ├ !%27: struct{usize, i32, i32} = .type_init                      ; todo_complex(struct)
    ├ !%28: typeof(struct{usize, i32, i32}) = .global_get declaration=(%1); typeof(struct{usize, i32, i32})
    ├ %29: *struct{usize, i32, i32} = .alloc type=(struct{usize, i32, i32}) mutable=(false); *struct{usize, i32, i32}@30
    ├ %30: usize = .constant                                          ; usize{ 4 }
    ├ %31: *usize = .get_element_pointer base=(%29) index=(%0)        ; *usize@30
    ├ %32: void = .store operand=(%31) payload=(%30)                  ; void
    ├ %33: i32 = .constant                                            ; i32{ 5 }
    ├ %34: *i32 = .get_element_pointer base=(%29) index=(%1)          ; *i32@38
    ├ %35: void = .store operand=(%34) payload=(%33)                  ; void
    ├ %36: i32 = .constant                                            ; i32{ 6 }
    ├ %37: *i32 = .get_element_pointer base=(%29) index=(%2)          ; *i32@3c
    ├ %38: void = .store operand=(%37) payload=(%36)                  ; void
    ├ %39: type = .constant                                           ; type(fn() void)
    └ %40: void = .fn_call callee_entity=(%7) callee=(%2) args_list=({}); void

