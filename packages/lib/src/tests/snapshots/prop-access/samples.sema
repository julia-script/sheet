;; Sema
;; 4 declarations
;; 11 entities
;; 4 symbols
;; 30 instructions
;; 16 values
;; 17 types
;; 6 lists
;; 19 strings
;; 16/20 comptime memory used/allocated bytes

%0 = type @"prop-access/samples.sk::T" = struct:
 ├ type: struct{i32}
 ├ alignment: 4
 ├ size: 4
 └ fields: 1
    └ [0]
       ├ alignment: 4
       ├ size: 4
       ├ offset: 0
       └ type: i32


%1 = fn @"prop-access/samples.sk::struct_static_method_access"() -> void
 └ %0: void = .block: [%1-%3]                                         ; void
    ├ %1: typeof(struct{i32}) = .global_get declaration=(%0)          ; typeof(struct{i32})
    ├ %2: type = .constant                                            ; type(fn() void)
    └ %3: void = .fn_call callee_entity=(%8) callee=(%3) args_list=({}); void

%2 = fn @"prop-access/samples.sk::builtin_method_access"() -> void
 └ %0: void = .block: [%1-%21]                                        ; void
    ├ %1: type = .constant                                            ; type([builtin_as])
    ├ !%2: typeof(i32) = .type                                        ; typeof(i32)
    ├ !%3: number = .constant                                         ; number{ 123 }
    ├ %4: i32 = .constant                                             ; i32{ 123 }
    ├ !%5: type = .typeof operand=(%4)                                ; type(i32)
    ├ %6: *i32 = .alloc type=(i32) mutable=(false)                    ; *i32@0
    ├ %7: void = .store operand=(%6) payload=(%4)                     ; void
    ├ %8: type = .constant                                            ; type([builtin_as])
    ├ !%9: typeof(f64) = .type                                        ; typeof(f64)
    ├ !%10: number = .constant                                        ; number{ 123 }
    ├ %11: f64 = .constant                                            ; f64{ 123 }
    ├ !%12: type = .typeof operand=(%11)                              ; type(f64)
    ├ %13: *f64 = .alloc type=(f64) mutable=(false)                   ; *f64@4
    ├ %14: void = .store operand=(%13) payload=(%11)                  ; void
    ├ %15: type = .constant                                           ; type([builtin_float_demote])
    ├ !%16: typeof(f32) = .type                                       ; typeof(f32)
    ├ !%17: f64 = .load operand=(%13)                                 ; f64{ -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037206620809969885 }
    ├ %18: f32 = .float_demote operand=(%17)                          ; f32{ -0.00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000037206620809969885 }
    ├ !%19: type = .typeof operand=(%18)                              ; type(f32)
    ├ %20: *f32 = .alloc type=(f32) mutable=(false)                   ; *f32@c
    └ %21: void = .store operand=(%20) payload=(%18)                  ; void

%3 = fn @"prop-access/samples.sk::T::mod::bar"() -> void
 └ %0: void = .block: [%1-%0]                                         ; void

