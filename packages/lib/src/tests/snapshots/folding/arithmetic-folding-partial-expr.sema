;; Sema
;; 1 declarations
;; 5 entities
;; 1 symbols
;; 21 instructions
;; 13 values
;; 2 types
;; 1 lists
;; 9 strings
;; 0/0 comptime memory used/allocated bytes

%0 = fn @"folding/arithmetic-folding-partial-expr.sk::folding"(i32) -> i32
 └ %0: void = .block: [%1-%20]                                        ; void
    ├ %1: i32 = .param index=(%0)                                     ; i32{ [runtime] }
    ├ %2: i32 = .param_get operand=(%1)                               ; i32{ [runtime] }
    ├ !%3: number = .constant                                         ; number{ 1 }
    ├ %4: i32 = .constant                                             ; i32{ 1 }
    ├ %5: i32 = .add lhs=(%2) rhs=(%4)                                ; i32{ [runtime] }
    ├ !%6: number = .constant                                         ; number{ 2 }
    ├ !%7: number = .constant                                         ; number{ 3 }
    ├ !%8: number = .constant                                         ; number{ 6 }
    ├ %9: i32 = .constant                                             ; i32{ 6 }
    ├ %10: i32 = .add lhs=(%5) rhs=(%9)                               ; i32{ [runtime] }
    ├ !%11: number = .constant                                        ; number{ 4 }
    ├ !%12: number = .constant                                        ; number{ 5 }
    ├ !%13: number = .constant                                        ; number{ 9 }
    ├ !%14: number = .constant                                        ; number{ 2 }
    ├ !%15: number = .constant                                        ; number{ 18 }
    ├ %16: i32 = .constant                                            ; i32{ 18 }
    ├ %17: i32 = .add lhs=(%10) rhs=(%16)                             ; i32{ [runtime] }
    ├ !%18: typeof(i32) = .type                                       ; typeof(i32)
    ├ %19: i32 = .cast operand=(%17)                                  ; i32{ [runtime] }
    └ %20: void = .ret maybe_operand=(%19)                            ; void

