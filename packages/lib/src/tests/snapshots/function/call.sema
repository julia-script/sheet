;; Sema
;; 6 declarations
;; 21 entities
;; 6 symbols
;; 48 instructions
;; 11 values
;; 7 types
;; 3 lists
;; 33 strings
;; 12/20 comptime memory used/allocated bytes

%0 = type @"function/call.sk::T" = struct:
 ├ type: struct{}
 ├ alignment: 0
 ├ size: 0
 └ fields: 0


%1 = fn @"function/call.sk::bar_add"(i32, i32) -> i32
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; exec_time
    ├ %2: i32 = .param index=(%1)                                     ; exec_time
    ├ %3: i32 = .param_get operand=(%1)                               ; exec_time
    ├ %4: i32 = .param_get operand=(%2)                               ; exec_time
    ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                ; exec_time
    ├ !%6: type = .type                                               ; type(i32)
    ├ %7: i32 = .cast operand=(%5)                                    ; exec_time
    └ %8: void = .ret maybe_operand=(%7)                              ; void

%2 = fn @"function/call.sk::namespaced"() -> void
 └ %0: void = .block: [%1-%9]                                         ; void
    ├ %1: todo(function) = .global_get declaration=(%5)               ; todo(function)
    ├ !%2: number = .constant                                         ; int(1)
    ├ !%3: number = .constant                                         ; int(2)
    ├ %4: i32 = .constant                                             ; int(1)
    ├ %5: i32 = .constant                                             ; int(2)
    ├ %6: i32 = .fn_call callee_entity=(%15) callee=(%5) args_list=({%4, %5}); exec_time
    ├ !%7: type = .typeof operand=(%6)                                ; type(i32)
    ├ %8: *i32 = .alloc type=(i32) mutable=(false)                    ; comp_ptr(0)
    └ %9: void = .store operand=(%8) payload=(%6)                     ; void

%3 = fn @"function/call.sk::global"() -> void
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ !%1: number = .constant                                         ; int(1)
    ├ !%2: number = .constant                                         ; int(2)
    ├ %3: i32 = .constant                                             ; int(1)
    ├ %4: i32 = .constant                                             ; int(2)
    ├ %5: i32 = .fn_call callee_entity=(%2) callee=(%1) args_list=({%3, %4}); exec_time
    ├ !%6: type = .typeof operand=(%5)                                ; type(i32)
    ├ %7: *i32 = .alloc type=(i32) mutable=(false)                    ; comp_ptr(4)
    └ %8: void = .store operand=(%7) payload=(%5)                     ; void

%4 = fn @"function/call.sk::builtin"() -> void
 └ %0: void = .block: [%1-%7]                                         ; void
    ├ !%1: number = .constant                                         ; int(2)
    ├ !%2: builtin_fn_as = .get_builtin_fn_as operand=(%1)            ; type(builtin_fn_as)
    ├ !%3: type = .type                                               ; type(i32)
    ├ %4: i32 = .constant                                             ; int(2)
    ├ !%5: type = .typeof operand=(%4)                                ; type(i32)
    ├ %6: *i32 = .alloc type=(i32) mutable=(false)                    ; comp_ptr(8)
    └ %7: void = .store operand=(%6) payload=(%4)                     ; void

%5 = fn @"function/call.sk::T::mod::foo_add"(i32, i32) -> i32
 └ %0: void = .block: [%1-%8]                                         ; void
    ├ %1: i32 = .param index=(%0)                                     ; exec_time
    ├ %2: i32 = .param index=(%1)                                     ; exec_time
    ├ %3: i32 = .param_get operand=(%1)                               ; exec_time
    ├ %4: i32 = .param_get operand=(%2)                               ; exec_time
    ├ %5: i32 = .add lhs=(%3) rhs=(%4)                                ; exec_time
    ├ !%6: type = .type                                               ; type(i32)
    ├ %7: i32 = .cast operand=(%5)                                    ; exec_time
    └ %8: void = .ret maybe_operand=(%7)                              ; void

