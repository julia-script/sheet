
type T = struct {
  bar: i32,
};

fn struct_alloc() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  const foo = T { bar = 123 };
}

fn struct_alloc_2() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  var foo = T { bar = 123 };

  // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %6 = const 3                          ; 3 int
  // %7 = as i32 %6                        ; 3 i32
  // %8 = store %5 %7                    ; void
  foo.bar = 3;
}

fn struct_alloc_3() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  var foo = T { bar = 123 };

  // %5 = alloc T                          ; *T@ptr:4
  // %6 = memcpy %5 %0                     ; void
  const foo2 = foo;
}

fn struct_load() void {
  // %0 = alloc T                          ; *T@ptr:0
  // %1 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %2 = const 123                        ; 123 int
  // %3 = as i32 %2                        ; 123 i32
  // %4 = store %1 %3                      ; void
  const foo = T { bar = 123 };

  // %5 = get_el_ptr %0 'bar' i=(0)        ; *i32@ptr:0
  // %6 = load %5                          ; 123 i32
  // %7 = alloc i32                        ; *i32@ptr:4
  // %8 = store %7 %6                      ; void
  const bar = foo.bar;
}

// const global_foo = T { bar = 123 };
// fn struct_from_global() void {
//   // %0 = alloc T                          ; *T@ptr:0
//   // %1 = memcpy %0 %global_foo            ; void
//   const bar = global_foo;
// }

fn int_alloc() void {
  // %0 = alloc i32                        ; *i32@ptr:0
  // %1 = const 10                         ; 10 int
  // %2 = as i32 %1                        ; 10 i32
  // %3 = store %0 %2                      ; void
  const foo: i32 = 10;
}

fn int_alloc_2() void {
  // %0 = alloc i32                        ; *i32@ptr:0
  // %1 = const 10                         ; 10 int
  // %2 = as i32 %1                        ; 10 i32
  // %3 = store %0 %2                      ; void
  var foo: i32 = 10;

  // %4 = const 123                        ; 123 int
  // %5 = as i32 %4                        ; 123 i32
  // %6 = store %0 %5                      ; void
  foo = 123;
}

// fn int_load() void {
//   // %0 = alloc i32                        ; *i32@ptr:0
//   // %1 = const 10                         ; 10 int
//   // %2 = as i32 %1                        ; 10 i32
//   // %3 = store %0 %2                      ; void
//   const foo: i32 = 10;

//   // %4 = load i32 %0                      ; 10 i32
//   // %5 = alloc i32                        ; *i32@ptr:4
//   // %6 = store i32 %5 %4                  ; void
//   const bar = foo;
// }

fn array_alloc() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  const foo: [3]i32 = [3]i32{1, 2, 3};
}

fn array_alloc_2() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  var foo: [3]i32 = [3]i32{1, 2, 3};

  // %19 = const 0                            ; 0 int
  // %20 = as usize %19                       ; 0 usize
  // %21 = get_el_ptr %0 i=(%20) offset=(0)   ; *i32@ptr:0
  // %22 = const 4                            ; 4 int
  // %23 = as i32 %22                         ; 4 i32
  // %24 = store %21 %23                      ; void
  foo[0] = 4;
}

fn array_alloc_3() void {
  // %0 = alloc [3]i32                        ; *[3]i32@ptr:0

  // %1 = const 0                             ; 0 int
  // %2 = as usize %1                         ; 0 usize
  // %3 = get_el_ptr %0 i=(%2) offset=(0)     ; *i32@ptr:0
  // %4 = const 1                             ; 1 int
  // %5 = as i32 %4                           ; 1 i32
  // %6 = store %3 %5                         ; void
 
  // %7 = const 1                             ; 1 int
  // %8 = as usize %7                         ; 1 usize
  // %9 = get_el_ptr %0 i=(%8) offset=(4)     ; *i32@ptr:4
  // %10 = const 2                            ; 2 int
  // %11 = as i32 %10                         ; 2 i32
  // %12 = store %9 %11                       ; void

  // %13 = const 2                            ; 2 int
  // %14 = as usize %13                       ; 2 usize
  // %15 = get_el_ptr %0 i=(%14) offset=(8)   ; *i32@ptr:8
  // %16 = const 3                            ; 3 int
  // %17 = as i32 %16                         ; 3 i32
  // %18 = store %15 %17                      ; void
  const foo = [3]i32{1, 2, 3};
}

// // %mem.data.0: [5]bchar = "Hello"
// fn str_alloc() void {
//   // %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0
//   // %1 = memcpy %0 %mem.data.0             ; void
//   const foo = "Hello";
// }
// fn str_alloc_2() void {
//   // %0 = alloc [5]bchar                    ; [..5]bchar@ptr:0
//   // %1 = memcpy %0 %mem.data.0             ; void
//   var foo = "Hello";

//   // %2 = usize.const 0                     ; 0 usize
//   // %3 = get_el_ptr %0 i=(%2) offset=(0)   ; *bchar@ptr:0
//   // %4 = bchar.const 'h'                   ; 'h' bchar
//   // %5 = store %3 %4                       ; void
//   foo[0] = 'h';
// }
